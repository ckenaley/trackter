% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kin.R
\name{kin.free}
\alias{kin.free}
\title{Midline tracking of free-moving ROI over image sequences}
\usage{
kin.free(
  image.dir = NULL,
  frames = NULL,
  par = FALSE,
  cores.n = NULL,
  thr = "otsu",
  ant.per = 0.1,
  tips = 0.02,
  smooth.n = 5,
  red = NULL,
  ml.smooth = list("spline", 0.25),
  save = TRUE,
  out.qual = 1,
  out.dir = NULL,
  plot.pml = TRUE,
  flip = TRUE,
  size.min = 0.02,
  search.for = "largest",
  edges = FALSE,
  border = 5
)
}
\arguments{
\item{image.dir}{character, directory containing images to analyze.}

\item{frames}{numeric, vector indicating which images to process. Must be >1. See Details.}

\item{par}{logical, should the frames be processed in parallel using \code{cores.n}.}

\item{cores.n}{numeric, the number of CPU cores to use if \code{par=TRUE}. If \code{cores.n=NULL} (the default), the total number of cores minus 1 are used.}

\item{thr}{numeric or character ('otsu'); the threshold to determine binary image. See Details.}

\item{ant.per}{numeric; anterior percentage of ROI that establishes the reference for the midline displacement.}

\item{tips, }{numeric, the proportion the the midline data to use in calculation of the head and tail position.}

\item{smooth.n, }{numeric, the number of contour smoothing iterations. See Details.}

\item{red}{numeric, between 0-1 the proportion of contour coordinates to sample for midline estimates. Will speed up midline estimations. If 'NULL', the full contour retrieved from the ROI will be passed to \code{\link{free.ml}}.}

\item{ml.smooth}{a list of length two with unnamed components including a character string specifying the midline smoothing method, either 'loess' or "spline", and a numeric value specifying the amount of smoothing. See Details.}

\item{save}{logical, value indicating if images should be outputted with midline and predicted midline based on the \code{ant.per} \code{lm} overlaying original or binary images.}

\item{out.qual, }{numeric, a value between 0-1 representing the quality of outputted images. Ignored if \code{save=FALSE}.}

\item{out.dir}{character, the directory to which outputted images should be saved.}

\item{plot.pml}{logical, value indicating if outputted images should include an overlay of the midline, head region and theoretical midline based on \code{ant.per}.}

\item{flip}{logical, indicating if binary image should be flipped.}

\item{size.min}{numeric, indicating the minimum size of ROIs as a proportion of the pixel field to be considered in analysis. May be useful if smaller unimportant ROIs appear in the frame. Default is 0.02.}

\item{search.for}{character, the search parameter. See Details.}

\item{edges}{logical, should ROIs on image edges be evaluated. See Details.}

\item{border}{if \code{edges=TRUE}, size of border to add in pixels. Dee details.}
}
\value{
A list with the following components:

\code{kin.dat} a data table consisting of frame-by-frame position parameters for the ROI determined by \code{search.for}.
\itemize{
\item the frame number
\item 'x' and ''y': the position of the tail (rightmost or posteriormost)
\item 'head.x' and 'head.y': the x and y position of the head (leftmost or anteriormost)
\item 'amp': the amplitude (\code{amp}) of the tail relative to thr theoretical midline determined by the \code{lm()} predictions from \code{ant.per}
\item 'head.pval': p values of the \code{lm()} fit that describes the position of the head as determined by \code{ant.per} (green points in the outputted images/video)
\item 'roi': a character indicating the ROI ranked by size ('a' being the largest)
\item 'edge': indicating whether ROI was on the edge of the image field
\item 'size': size of the ROI in pixels^2
\item 'offset.x': ROI distance from horizontal center
\item 'offset.y': ROI distance from vertical center
\item 'offset': linear distance of ROI's centroid to image center
}

\code{midline} A data table containing, for each frame described by \code{frames}, the following:
\itemize{
\item 'x' and 'y': x and y positions of the midline of the ROI
\item 'roi': a character indicating ROI size ('a' being the largest)
\item 'y.pred': the smooth predicted midline
\item 'mid.pred': the predicted linear midline based on the points/pixels defined by \code{head.per} (green points in the outputted images/video)
\item 'y.pred': midline points fit to a smooth spline or loess model with spar or span equal to \code{smooth} (red curve in the outputted images/video)
\item 'wave.y': midline points 'y.pred' relative to 'mid.pred'
\item 'roi': a character indicating ROI size ('a' being the largest)
}

\code{cont} A data table containing x and y positions of the contours used to calculate the data in 'kin.dat'. Contains the following:
\itemize{
\item 'frame': the frame
\item 'x' and 'y': the x and y positions of the contours
}

\code{all.classes} A data table containing the following for all ROIs detected:
\itemize{
\item 'frame': the frame
\item 'roi': the name of each ROI found in a frame.
\item 'edge': indicating whether ROI was on the edge of the image field
\item 'size': size of the ROI in pixels^2
\item 'offset.x': ROI distance from horizontal center
\item 'offset.y': ROI distance from vertical center
\item 'offset': linear distance of ROI's centroid to image center
}

\code{dim} the x and y dimensions of the images analyzed

A list with the following components:

\code{kin.dat} a data table consisting of frame-by-frame position parameters for the ROI
\itemize{
\item the frame number
\item 'x' and 'y': the position of the tail (rightmost or posteriormost)
\item 'head.x' and 'head.y': the x and y position of the head (leftmost or anteriormost)
\item 'amp': the amplitude of the tail (taken from 'wave.y' of \code{midline})
#' \item 'head.pval': p values of the \code{lm()} fit that describes the position of the head as determined by \code{ant.per} (green points in the outputted images)
\item 'roi': a character indicating ROI size ('a' being the largest)
\item 'edge': was the roi on the edge of the frame}

\code{midline} A data table containing, for each frame described by \code{frames}, the following: \itemize{
\item 'x' and 'y.m': x and y positions of the midline of the ROI
\item 'x.sm' and 'y.sm': the smoothed midline positions predicted by \code{smoothing}
\item 'y.pred': midline points fit to a smooth spline or loess model with spar or span equal to \code{smooth} (red curve in the outputted images if \code{save=TRUE})
\item 'wave.y': y position of midline points (see below)
\item 'per.bl': the percentage of 'x.sm' along the body length calculated as the cumulative sum of distances between points
}

\code{mid.pred} the theoretical midline based on a linear model established by the anterior section of \code{midline$x.sm} in \code{ant.per}. Used to calculate \code{midline$wave.y} as the orthogonal distance between the line defined by 'x' and 'mid.pred' and each coordinate defined by '\code{midline$x.sm} and \code{midline$y.sm}. A data table that contains the following:
\itemize{
\item 'frame': the frame
\item 'x': x position of the predicted midline
\item 'mid.pred': the y position of the predicted midline
}

\code{dim} the x and y dimensions of the images analyzed
}
\description{
Automatically retrieves the midline of a detected ROI that is free to move in the spatial field of an image sequence. Does so through threshholding and segmentation; finds the midpoint coordinates from each half of the ROI sharing the same index then calculates a smoothed midline according to a chosen smoothing method (loess or smooth spline). Also outputs the midline amplitude relative to a reference line determined by an anterior section of the ROI. Supported image formats are jpeg, png, and tiff. Supports parallel processing of frames.
}
\details{
The midline is calculated as the midpoint coodinates between the extrema of the coordinates describing each ROIs contour (i.e, the coordinates spanning the longest euclidean distance). Chooses ROIs based on relative ROI size or position.

The position of the anterior of the ROI (that which is moving forward in the field) is determined by the displacement of the ROI between the first two frames. Thus, \code{frames} must be >1.

The midline is determine by first finding the tips of the ROI (i.e., the two coordinates in the outline that are farthest from one another) with \code{\link{free.ml}} and therefore assumes the ROI is elongate and moving along this long axis. Using \code{\link{free.ml}}, the function bisects the ROI contour at the tips, giving it two sides with coordinates of equal length. The midline coordinates are calculated as the midpoints defined between all pairs of coordinates with the same index value.

Thresholding operations can be performed with an arbitrary (user defined) numeric value or with Otsu's method ('thr="otsu"'). The latter chooses a threshold value by minimizing the combined intra-class variance. See \code{\link{otsu}}.

If 'edges=TRUE', it is best to add an artificial border so that any part of the ROI in contact with the edge can be distinguished from it.

\code{search.for} determines how ROIs are chosen:
\itemize{
\item "offset", the ROI with a centroid that is the shortest linear distance to the center of the field
\item "offset.x", the ROI with a centroid x position that is closest to the x position of the center of the field
\item "offset.y", the ROI with a centroid y position that is closest to the y position of the center of the field
\item "largest", the largest ROI.
}

These choices will be made on ROI sets that are not on the edge of the field if 'edges=FALSE'.

\code{edges} Set by default to 'FALSE'. It is not advisable to include shapes that are on the edge of any frame and are therefore incomplete.	Yet, if set to 'TRUE', the \code{border} adds a black border to the image so that the intended ROI may be distinguished from the edge.

For midline smoothing, if \code{ml.smooth} contains 'spline' (the default), \code{\link{smooth_spline}} from the \code{smoothr} package is used to interpolate points between a reduced number of vertices using piecewise cubic polynomials. The number of vertices is calculated based on the number of midline coordinates times numeric value of the list in \code{ml.smooth}. If \code{ml.smooth} contains 'loess', \code{loess} is used to fit a polynomial surface. For contours that have a complicated midline with non-unique x values, loess smoothing can produce poor results. Thus, spline smoothing is usually the advisable option. 

For contour smoothing \code{smooth.n} is passed to the \code{n} parameter of \code{\link{free.ml}}, which smooths coordinates using a simple moving average. Users should be wary of oversmoothing by smoothing both the contour (from which the midline is calculated) and the midline.
}
\examples{

#### plot lot caudal amplitude and produce a classic midline waveform plot of swimming fish
##A very long example.
\dontrun{

#download example images and place in 'example' subdirectory
f <- "https://github.com/ckenaley/exampledata/blob/master/ropefish.avi?raw=true"

download.file(f, paste0(tempdir(),"/ropefish.avi"))

dir.create(paste0(tempdir(),"/images"))
dir.create(paste0(tempdir(),"/out"))

vid.to.images(paste0(tempdir(),"/ropefish.avi"), out.dir = paste0(tempdir(),"/images"))

kin <- kin.free(image.dir =paste0(tempdir(),"/images"),
      par=FALSE,
      save=T,
      out.dir=paste0(tempdir(),"/out"),
      ml.smooth=list("spline",0.9),
      thr = "otsu",
      size.min=0.01,
      frame=1:20,
      red=0.5
      )

fi <- list.files(paste0(tempdir(),"/out"),full.names=T)
EBImage::display(EBImage::readImage(fi[1]))
#plot instantaneous amplitude of tail (last/rightmost point) over frames
p <- ggplot(dat=kin$kin.dat,aes(x=frame,y=amp))+geom_line()+geom_point()+theme_classic(15)
print(p)

# midline plot
ml <- kin$midline
p <- ggplot(dat=ml,aes(x=x.sm,y=y.sm,col=frame))+geom_point()+theme_classic(15)
print(p)

unlink(paste0(tempdir(),"/images"),recursive=TRUE)
unlink(paste0(tempdir(),"/out"),recursive=TRUE)
}

}
\seealso{
\code{\link{kin.search}}, \code{\link{kin.simple}},\code{\link{free.ml}}
}
