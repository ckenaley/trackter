% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kin.R
\name{kin.search}
\alias{kin.search}
\alias{kin.simple}
\title{Midline and outline tracking over image sequences}
\usage{
kin.search(
  image.dir = NULL,
  frames = NULL,
  plot.pml = TRUE,
  ant.per = 0.1,
  tips = 0.02,
  smoothing = "loess",
  smooth = 0.25,
  save = TRUE,
  out.qual = 1,
  out.dir = NULL,
  ...
)

kin.simple(
  image.dir = NULL,
  frames = NULL,
  ant.per = 0.2,
  tips = 0.02,
  smoothing = "loess",
  smooth = 0.25,
  save = TRUE,
  out.qual = 1,
  out.dir = NULL,
  plot.pml = TRUE
)
}
\arguments{
\item{image.dir}{character, directory containing images to analyze.}

\item{frames}{numeric, vector indicating which images to process. NULL, the default, will result in all images in \code{image.dir} processed.}

\item{plot.pml}{logical, value indicating if outputted images should include an overlay of the theoretical midline based on \code{ant.per}.}

\item{ant.per}{numeric; left-most percentage of ROI that establishes the horizontal reference for the midline displacement.}

\item{tips, }{numeric, the proportion the the midline data to use in calculation of the head and tail position.}

\item{smoothing}{character, the midline smoothing method, either 'loess' or "spline".}

\item{smooth}{numeric; if \code{smoothing} if set to 'loess', smoothing parameter value for plotted midline.}

\item{save}{logical, value indicating if images should be outputted with midline and predicted midline based on the \code{ant.per} \code{lm()} overlaying original or binary images.}

\item{out.qual, }{numeric, a value between 0-1 representing the quality of outputted images. Ignored if \code{save=FALSE}.}

\item{out.dir}{character, the directory to which outputted images should be saved.}

\item{...}{other parameters passed to \code{link{find.roi}} (\code{kin.search} only).}
}
\value{
A list with the following components:

\code{kin.dat} a data table consisting of frame-by-frame position parameters for the ROI determined by \code{search.for}.
\itemize{
\item the frame number
\item 'x' and ''y': the position of the tail (rightmost or posteriormost)
\item 'head.x' and 'head.y': the x and y position of the head (leftmost or anteriormost)
\item 'amp': the amplitude (\code{amp}) of the tail relative to thr theoretical midline determined by the \code{lm()} predictions from \code{ant.per}
\item 'head.pval': p values of the \code{lm()} fit that describes the position of the head as determined by \code{ant.per} (green points in the outputted images/video)
\item 'roi': a character indicating the ROI ranked by size ('a' being the largest)
\item 'edge': indicating whether ROI was on the edge of the image field
\item 'size': size of the ROI in pixels^2
\item 'offset.x': ROI distance from horizontal center
\item 'offset.y': ROI distance from vertical center
\item 'offset': linear distance of ROI's centroid to image center
}

\code{midline} A data table containing, for each frame described by \code{frames}, the following:
\itemize{
\item 'x' and 'y.m': x and y positions of the midline of the ROI
#' \item 'y.min' and 'y.max': min and max y positions ROI's contour used in y.m calculation
\item 'mid.pred': the predicted linear midline based on the points/pixels defined by \code{head.per} (green points in the outputted images/video)
\item 'y.pred': midline points fit to a smooth spline or loess model with spar or span equal to \code{smooth} (red curve in the outputted images/video)
\item 'wave.y': midline points 'y.pred' relative to 'mid.pred'
\item 'roi': a character indicating ROI size ('a' being the largest)
}

\code{cont} A data table containing x and y positions of the contours used to calculate the data in 'kin.dat'. Contains the following:
\itemize{
\item 'frame': the frame
\item 'x' and 'y': the x and y positions of the contours
}

\code{all.classes} A data table containing the following for all ROIs detected:
\itemize{
\item 'frame': the frame
\item 'roi': the name of each ROI found in a frame.
\item 'edge': indicating whether ROI was on the edge of the image field
\item 'size': size of the ROI in pixels^2
\item 'offset.x': ROI distance from horizontal center
\item 'offset.y': ROI distance from vertical center
\item 'offset': linear distance of ROI's centroid to image center
}

\code{dim} the x and y dimensions of the images analyzed

A list with the following components:

\code{kin.dat} a data frame consisting of frame-by-frame position parameters for the ROI
\itemize{
\item the frame number

\item 'head.x' and 'head.y': the x and y position of the head (leftmost or anteriormost)
\item 'x' and 'y': the position of the tail (rightmost or posteriormost)
\item 'amp': the amplitude (\code{amp}) of the tail
\item 'cent.x' and 'cent.y': centroid coordinate of ROI
\item 'roi': a character indicating ROI size ('a' being the largest)
\item 'head.pval': p values of the \code{lm()} fit that describes the position of the head as determined by \code{ant.per} (green points in the outputted images/video)}

\code{midline} A data frame containing, for each frame described by \code{frames}, the following: \itemize{
\item 'x' and 'y.m': x and y positions of the midline of the ROI
\item 'roi': a character indicating ROI size ('a' being the largest)
\item 'mid.pred': the predicted linear midline based on the points/pixels defined by \code{head.per} (green points in the outputted images/video)
\item 'y.pred': midline points fit to a smooth spline or loess model with spar or span equal to \code{smooth} (red curve in the outputted images/video)
\item 'wave.y': midline points 'y.pred' normalized to 'mid.pred'
}

\code{dim} the x and y dimensions of the images analyzed
}
\description{
Wrapper functions for \code{\link{find.roi}} that automatically retrieve the contour and midline coordinates of a detected ROI in each image of a sequence through thresholding and segmentation.  Functions find the y-value midpoint along the x-value array of the ROI and fits a midline according to a chosen smoothing method (loess or spline). Also outputs the midline amplitude relative to a reference line determined by an anterior section of the ROI. Supported image formats are jpeg, png, and tiff.

\code{kin.search} includes arguments for flexible ROI selection.

\code{kin.simple} is itself a wrapper for \code{kin.search}, finding the largest ROI in field using Otsu thresholding for segmentation.
}
\details{

}
\examples{

#### plot caudal amplitude and produce a classic midline waveform plot of a swimming rainbow trout
##A very long example.
\dontrun{

#download example images and place in 'example' subdirectory
f <- "https://github.com/ckenaley/exampledata/blob/master/example.zip?raw=true"

download.file(f, paste0(tempdir(),"/temp.zip"))
unzip(paste0(tempdir(),"/temp.zip"), exdir=tempdir())
unlink(paste0(tempdir(),"/temp.zip"))

dir.create(paste0(tempdir(),"/processed_images"))
kin <- kin.search(image.dir =paste0(tempdir(),"/example"),
      smoothing = "loess",frames=1:50,
      out.dir=paste0(tempdir(),"/processed_images"),
      smooth=0.4)
      

#plot instantaneous amplitude of tail (last/rightmost point) over frames
library(ggplot2)
p <- ggplot(dat=kin$kin.dat,aes(x=frame,y=amp))+geom_line()+geom_point()+theme_classic(15)
print(p)

# midline plot
ml <- kin$midline
#leftmost x starts at 0
ml <- ml[,x2:=x-x[1],by=frame]

ml <- merge(ml,kin$kin.dat[,list(frame,amp)],by="frame") #merge these

p <- ggplot(dat=ml,aes(x=x2,y=wave.y))+theme_classic(15)
p <- p+geom_line(aes(group=frame,color=amp),stat="smooth",method = "loess", size = 1.5)
print(p)

#Make a video of processed frames

images.to.video2(image.dir=paste0(tempdir(),"/processed_images"),
vid.name="trout_test",out.dir=tempdir(),frame.rate=5,qual=100,raw=FALSE)
file.exists(paste0(tempdir(),"/trout_test_red.mp4"))

}

## A very quick example using kin.simple() and kin.search().

#retrieve image with arguments passed to find.roi()
i <- EBImage::readImage(system.file("extdata/img", "sunfish_BCF.jpg", package = "trackter"))
#create directory and write image to it
t <- tempdir()


dir.create(paste0(t,"/images"))

EBImage::writeImage(i,paste0(t,"/images/sunfish001.jpg"),type = "jpeg")

fi <- list.files(paste0(t,"/images"),full.names=TRUE)
#run kin.search and save output image to directory

kin.srch<- kin.search(image.dir = paste0(t,"/images"),smooth=0.2,
save = TRUE,out.dir = t,thr=0.8,search.for="largest",size.min=0.01)

kin.simp<- kin.simple(image.dir = paste0(t,"/images"),smooth=0.2,
save = TRUE,out.dir = t)

#plot similar results
library(ggplot2)

kin.both <- rbind(data.table(kin.srch$midline,fun="search"),
data.table(kin.simp$midline,fun="simple"))

qplot(data=kin.both,x=x,y=y.pred,col=fun)

#' #plot midline over original image from kin.simple()
i2 <- EBImage::readImage(paste0(t,"/sunfish001_000.jpg"))
EBImage::display(i2,method="raster")

#clean up
unlink(paste0(t,"/images"),recursive=TRUE)

}
\seealso{
\code{\link{kin.simple}}, \code{\link{kin.free}}, \code{\link{find.roi}}
}
