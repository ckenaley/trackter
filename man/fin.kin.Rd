% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kin2.R
\name{fin.kin}
\alias{fin.kin}
\title{Tracking of fin-like extensions of body contours}
\usage{
fin.kin(x, fin.pos = NULL, smooth.n = 50, tip.ang = 10,
  smoothing = "loess", ml.smooth = 0.2)
}
\arguments{
\item{x}{a data frame or matrix with 'x' and 'y' data as columns.}

\item{fin.pos}{numeric, a vector of length 2 indicating the start and end of the contour region that contains the fins of interest as a proportion of the the length.}

\item{smooth.n}{numeric, the number of smoothing operations undertaken by \link{coo_smooth} on the contour described by 'x'.}

\item{smoothing}{character, the midline smoothing method, either 'loess' or 'spline'.}

\item{ml.smooth}{numeric the smoothing value for the midline. If \code{smoothing} is set to 'loess', passed to 'span' value for \code{\link{loess}}. If \code{smoothing} is set to 'spline', passed to 'spar' value for \code{\link{smooth.spline}}}

\item{tip.angle}{the minimum angle, in degrees, that defines tip of each fin. See Details.}
}
\value{
A list with the following components:

\code{body} a data table consisting of x,y coordinates of the body contour

\code{fin} a data table describing the contour of the fins consisting of the following:

\itemize{
\item x,y coordinates within the range of \code{fin.pos}

\item 'ang': the angle formed by each coordinate and its adjacent points.
\item 'fin': fin side, 'L' or 'R'
\item 'y.pred': predicted y values according to \code{lm()} from start to end of fins. 
}

#' \code{fin.pts} a data table describing fin position consisting of the following:

\itemize{
\item  x,y coordinates of the fin tips, start, and end within the range of \code{fin.pos}.
\item 'ang': the angle formed by the coordinataes and their adjacent points.
\item 'pos': descripiton of the coordinates' positions, 'start', 'end' or 'tip'.
}

\code{comp} a data table describing the composite contour of the body minus the fins.
\itemize{
\item  x,y coordinates of the body except the range of x values withing \code{fin.pos}. These values take on a straight line described by the prediction of \code{lm()} based on the start and end of the fin. See Details.
\item 'y.m': the predicted y position of the midline described by the \code{ml.smooth} parameter. See Details.
}
}
\description{
Estimates the amplitudes of regions along a body contour that are protruding. Useful in computing paired-fin amplitudes from contour data produce from \link{kin.LDA} and \link{kin.simple}. Also computes a smoothed midline based on the body outline with the fin region removed.
}
\details{
The algorithm assumes a left-right orientation, i.e., the head of the contour is left. If otherwise oriented, contour can be flipped with \code{\link{coo_flipx}} and \code{\link{coo_flipy}} after converting contour to class \code{coo}.

 \code{tip.angle} is used to define the tip of the fin, assuming that the tip of the fin is pointed and, for a sufficently smoothed fin contour, will have countour edges that form the highest angles within the fin region defined by \code{fin.pos}. Low values of \code{smooth.n} ($<$5) should be avoided if the contour is jagged, perhaps due to digitization.
 
 In addition to fin amplitude and contour extraction, also produces a composite contour of the body minus the fin area described by \code{fin.pos}. Fin contours are replaced by a simple linear prediction constructed from the coordinates of the first and last values covered by \code{fin.pos}. The result is a straight line between the start and end of each fin. From this composite body contour, a midline prediction is made based on the method indicated by \code{smoothing}.
}
\examples{
###plot pectoral-fin amplitudes of a swimming sunfish
\dontrun{
require(ggplot2)
require(data.table)
require(dplyr)
require(EBImage)

#download example avi video
f <- "https://github.com/ckenaley/exampledata/blob/master/sunfish_pect.avi?raw=true"
download.file(f,"sunfish.avi")

#extract images with and reduce them to 600 px wide with a filter
filt.red <- " -vf scale=600:-1 " #filter
vid.to.images2(vid.path="sunfish.avi",filt = filt.red) #extract

#number of frames
fr <- length(list.files("images"))
#extract contours and other data
kin <- kin.simple(image.dir = "images",frames=c(1:fr),thr=0.9,ant.per = 0.25)
#fin amplitudes by frame with data.table
fin.dat <- kin$cont[, { f <- fin.kin(data.frame(x=x,y=y),fin.pos =fin.pos);list(amp=f$amp$amp,fin=f$amp$fin,amp.bl=f$amp$amp.bl)},by=.(frame)]
p <- ggplot(dat=fin.dat,aes(x=frame,y=amp,col=fin))+geom_line()+theme_classic(15)
print(p)

#delete 'images' and 'processed_images' folders
unlink("processed_images",recursive = T)
unlink("images",,recursive = T)

## plot body and fin contours of frame 1
cont <- data.frame(x=kin$cont[frame==1,.(x,y)]$x,y=kin$cont[frame==1,.(y)]$y)
fins <- fin.kin(cont,fin.pos =fin.pos)

#for plotting
p.dimX <- round(range(cont$x)*c(0.9,1.1))
p.dimY <- round(range(cont$y)*c(0.7,1))

#plot body contour and fins 
qplot(data=fins$body,x=x,y=y)+geom_point(data=fins$fin,aes(x,y),col="red",size=3)+geom_point(data=fins$fin.pts,aes(x,y,shape=pos))+xlim(p.dimX)+ylim(p.dimY)

#plot body contour minus fins and the body midline
qplot(data=fins$comp,x=x,y=y)+geom_point(aes(x,y.m),col="red",size=2)+xlim(p.dimX)+ylim(p.dimY)

#midlines based on body contours minus fins
fin.dat <- kin$cont[, { f <- fin.kin(data.frame(x=x,y=y),fin.pos =fin.pos);list(x=f$comp$x,fin=f$comp$y,yamp.bl=f$amp$amp.bl)},by=.(frame)]
}

}
\seealso{
\code{\link{kin.simple}}, \code{\link{kin.LDA}}, \code{\link{efourier}}, \code{\link{coo_angle_edges}}, \code{\link{coo_smooth}}, \code{\link{loess}}, \code{\link{smooth.spline}}
}
